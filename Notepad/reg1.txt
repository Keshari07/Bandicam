Create registration  using python and HTML, CSS,  JavaScript with database PGSQL code
ChatGPT

3 / 3

To create a registration page in a web application using Python, HTML, CSS, JavaScript, and PostgreSQL, you can extend the previous example. Here's how you can create a simple registration page:

Update your app.py to include registration functionality:
python
Copy code
# ... (previous code)

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        hashed_password = generate_password_hash(password)

        conn = connect_db()
        cursor = conn.cursor()

        try:
            cursor.execute("INSERT INTO users (username, password) VALUES (%s, %s)", (username, hashed_password))
            conn.commit()
            conn.close()
            return redirect(url_for('index'))
        except psycopg2.Error as e:
            conn.rollback()
            return 'Registration failed. Username already exists or there was an error.'

    return render_template('register.html')

# ... (rest of the code)
Create an HTML template for the registration page (register.html):
html
Copy code
<!DOCTYPE html>
<html>
<head>
    <title>Registration</title>
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <div class="register-container">
        <h1>Register</h1>
        <form method="POST" action="/register">
            <input type="text" name="username" placeholder="Username" required>
            <input type="password" name="password" placeholder="Password" required>
            <button type="submit">Register</button>
        </form>
        <p>Already have an account? <a href="/">Login</a></p>
    </div>
</body>
</html>
Update the index() function in app.py to handle the case where a user is already logged in:
python
Copy code
@app.route('/')
def index():
    if 'user' in session:
        return redirect(url_for('dashboard'))
    return render_template('login.html')
Create a CSS file (style.css) to style your registration page:
css
Copy code
/* Add your CSS styling here */
Now, when a user visits the /register URL, they can register by providing a username and password. The registration details are stored in the PostgreSQL database. If the username already exists or there's an error, the registration will fail.

Remember to run your Flask application using python app.py after making these changes, and ensure you have the necessary PostgreSQL database and tables set up as described in the previous answer.